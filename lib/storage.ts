/**
 * ÈÄöÁî®Â≠òÂÇ® Util
 * @author hsc
 */

import { ENV_KEYS, getEnv } from "./env";

// üëá ‰ΩøÁî® as const ‰øùËØÅÈîÆÂÄº‰∏∫Â≠óÈù¢ÈáèÁ±ªÂûãÔºåÊîØÊåÅÁ±ªÂûãÊé®Êñ≠
export const STORAGE_KEYS = {
  LANG: "lang", // üëà Êîπ‰∏∫ËØ≠‰πâÂåñÂ§ßÂÜôÂ∏∏ÈáèÔºåÈÅøÂÖçÊ≠ß‰πâ
  ACCESS_TOKEN: "access_token", // ËÆøÈóÆ‰ª§Áâå
  REFRESH_TOKEN: "refresh_token", // Âà∑Êñ∞‰ª§Áâå
  USER_INFO: "user_info", // Áî®Êà∑‰ø°ÊÅØ
  PERMISSIONS: "permissions", // Áî®Êà∑ÊùÉÈôê
  ROLES: "roles", // Áî®Êà∑ËßíËâ≤
} as const;

// üëá Á±ªÂûãÂÆö‰πâÔºöÊâÄÊúâÂêàÊ≥ïÁöÑ storage key
export type StorageKey = (typeof STORAGE_KEYS)[keyof typeof STORAGE_KEYS];

/**
 * Ëé∑ÂèñÂ∏¶ÂâçÁºÄÁöÑÂ≠òÂÇ®ÈîÆÂêç
 * @param key - Â≠òÂÇ®ÈîÆÂêçÔºåÂøÖÈ°ªÊòØ STORAGE_KEYS ‰∏≠ÂÆö‰πâÁöÑÈîÆ
 * @returns Â∏¶ÁéØÂ¢ÉÂâçÁºÄÁöÑÂÆåÊï¥ÈîÆÂêç
 */
export const getStorageKey = (key: StorageKey): string => {
  const prefix = getEnv(ENV_KEYS.NEXT_STORE_PREFIX);
  // @ts-ignore
  return prefix + key;
};

/**
 * ÂÆâÂÖ®ÁöÑÂ≠òÂÇ®Êìç‰ΩúÂ∑•ÂÖ∑ÂáΩÊï∞
 */
export const storage = {
  /**
   * ËÆæÁΩÆÂ≠òÂÇ®È°π
   */
  setItem: (key: StorageKey, value: any): void => {
    if (typeof window === 'undefined') return;
    try {
      const storageKey = getStorageKey(key);
      const serializedValue = typeof value === 'string' ? value : JSON.stringify(value);
      localStorage.setItem(storageKey, serializedValue);
    } catch (error) {
      console.error('Storage setItem error:', error);
    }
  },

  /**
   * Ëé∑ÂèñÂ≠òÂÇ®È°π
   */
  getItem: <T = string>(key: StorageKey, defaultValue?: T): T | null => {
    if (typeof window === 'undefined') return defaultValue || null;
    try {
      const storageKey = getStorageKey(key);
      const item = localStorage.getItem(storageKey);
      if (item === null) return defaultValue || null;
      
      // Â∞ùËØïËß£Êûê JSONÔºåÂ¶ÇÊûúÂ§±Ë¥•ÂàôËøîÂõûÂéüÂßãÂ≠óÁ¨¶‰∏≤
      try {
        return JSON.parse(item);
      } catch {
        return item as unknown as T;
      }
    } catch (error) {
      console.error('Storage getItem error:', error);
      return defaultValue || null;
    }
  },

  /**
   * Âà†Èô§Â≠òÂÇ®È°π
   */
  removeItem: (key: StorageKey): void => {
    if (typeof window === 'undefined') return;
    try {
      const storageKey = getStorageKey(key);
      localStorage.removeItem(storageKey);
    } catch (error) {
      console.error('Storage removeItem error:', error);
    }
  },

  /**
   * Ê∏ÖÁ©∫ÊâÄÊúâÂ∫îÁî®Áõ∏ÂÖ≥ÁöÑÂ≠òÂÇ®È°π
   */
  clear: (): void => {
    if (typeof window === 'undefined') return;
    try {
      const prefix = getEnv(ENV_KEYS.NEXT_STORE_PREFIX);
      const keys = Object.keys(localStorage);
      keys.forEach(key => {
        if (key.startsWith(prefix)) {
          localStorage.removeItem(key);
        }
      });
    } catch (error) {
      console.error('Storage clear error:', error);
    }
  },
};
